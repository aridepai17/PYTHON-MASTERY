- TWO POINTER PATTERN -

The Two Pointers technique is a clever strategy used in algorithm design, particularly when dealing with arrays or linked lists. 
Imagine you have two fingers, and you place each at different ends or positions of an array. 
These ‘fingers’ or pointers then traverse through the array, helping you to compare, search, or even manipulate the data efficiently.

- WHEN TO USE IT - 
1. Ordered Data Structures: This pattern shines when applied to ordered arrays or lists, allowing for intelligent, position-based decisions that can significantly optimize the algorithm.
2. Efficiency: By reducing the need for nested loops, the Two Pointers technique helps in achieving linear time complexity, making your algorithm faster and more efficient.

- PROS - 
Efficiency: Achieves O(n) time complexity for problems that might otherwise require O(n^2).
Simplicity: Once mastered, it provides a straightforward and elegant solution.

- CONS -
Applicability: Mainly beneficial for problems involving sequences or intervals.
Initial Complexity: It might take some time to get the hang of this pattern and understand where and how to move the pointers.

- TECHNIQUE -
1. Initialize two pointers, one at the start (left) and one at the end (right) of the array.
2. Check the sum of the elements at the two pointers.
3. If the sum equals the target, return the indices.
4. If the sum is less than the target, move the left pointer to the right.
5. If the sum is greater than the target, move the right pointer to the left.

- TEMPLATE -

def two_pointer_pattern(array, target):
    left = 0
    right = len(array) - 1
    
    while left < right:
        current_sum = array[left] + array[right]
        
        if current_sum == target:
            return (left, right)  # Return indices
        elif current_sum < target:
            left += 1  # Move left pointer to the right
        else:
            right -= 1  # Move right pointer to the left
            
    return None  # Return None if no pair is found