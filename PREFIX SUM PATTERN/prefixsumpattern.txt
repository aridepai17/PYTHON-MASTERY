- PREFIX SUM PATTERN - 

When to use it?
1.Cumulative sums are needed from index 0 to any element
2.Querying subarray sums frequently across multiple ranges
3.Partial sums can be reused efficiently

Technique
To sum a subarray would take O(N). To sum Q subarrays would take O(N*Q). Can we perform a more efficient algorithm to answer queries? 
Yes, we can calculate a prefix sum array where -
prefix[i] = prefix[i-1] + arr[i]

And then we can find the sum of any subarray in O(1) time using the formula -
sum[i, j] = prefix[j] - prefix[i-1]

Therefore, we can answer Q queries in O(N) time complexity with a prefix sum.


Builds the prefix sum array
def build_prefix_sum(arr):
    # Initialize prefix sum array
    n = len(arr)
    prefix = [0] * n 

    # First element is the same as the original array
    prefix[0] = arr[0]

    # Build the prefix sum array
    for i in range(1, n):
        prefix[i] = prefix[i - 1] + arr[i]

    return prefix

def query_subarray_sum(prefix, i, j):
    if i == 0:
        return prefix[j]
    return prefix[j] - prefix[i - 1]